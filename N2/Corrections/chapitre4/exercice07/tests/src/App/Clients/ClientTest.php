<?php
namespace App\Clients;

/**
 * Generated by PHPUnit_SkeletonGenerator.
 */
class ClientTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Client
     */
    protected $object;

    /**
     * @var BddFactory
     */
    protected $db;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->db = \App\Bdd\BddFactory::create("memory");
        $this->db->exec(file_get_contents(APP_ROOT . '/ressources/tests/databases/memory.sql'));
        
        $this->object = new Client($this->db);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \App\Clients\Client::ajouterLigne
     * @covers \App\Clients\Client::getLignes
     */
    public function testAjouterLigne() {
        $this->assertCount(0, $this->object->getLignes());
        
        $this->object->ajouterLigne("0102030405", "zen");
        $this->assertCount(1, $this->object->getLignes());
        
        $this->object->ajouterLigne("0202030405", "zen");
        $this->object->ajouterLigne("0302030405", "zen");
        $this->assertCount(3, $this->object->getLignes());
    }

    /**
     * @covers \App\Clients\Client::utiliserData
     * @covers \App\Forfaits\ForfaitAbstract::utiliserData
     * @covers \App\Forfaits\ForfaitAbstract::getDataUsedOctet
     */
    public function testUtiliserData() {
        $this->object->ajouterLigne("0102030405", "play");
        $this->object->utiliserData("0102030405", 500);
        $this->assertEquals($this->object->getLignes()['0102030405']->getDataUsedOctet(), 500);
        
        $this->object->ajouterLigne("0202030405", "zen"); // Zen = Pas de Data possible
        $this->object->utiliserData("0202030405", 500);
        $this->assertEquals($this->object->getLignes()['0202030405']->getDataUsedOctet(), null);
    }

    /**
     * @covers \App\Clients\Client::loadFromDbRowObj
     * @covers \App\Clients\Client::getFullName
     */
    public function testGetFullName() {
        $fullnameHTML1 = $this->object->getFullName();
        
        $this->assertRegExp("`<span style=''></span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;'></span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;font-variant:small-caps;'></span>`", $fullnameHTML1);
        
        $objCli = new \stdClass();
        $objCli->idClient       = 9999;
        $objCli->civilite       = 'M.';
        $objCli->prenom         = 'Napoléon';
        $objCli->nom            = 'Bonaparte';
        $objCli->telephone      = '0601010101';
        $objCli->libelleForfait = 'jet';
        $objCli->dataUsed       = 500;
        
        $this->object->loadFromDbRowObj($objCli);
        $fullnameHTML2 = $this->object->getFullName();
        
        $this->assertRegExp("`<span style=''>M.</span>`", $fullnameHTML2);
        $this->assertRegExp("`<span style='text-transform:capitalize;'>Napoléon</span>`", $fullnameHTML2);
        $this->assertRegExp("`<span style='text-transform:capitalize;font-variant:small-caps;'>Bonaparte</span>`", $fullnameHTML2);
        
        $this->assertFalse($this->object->loadFromDbRowObj(null));
    }

    /**
     * @covers \App\Clients\Client::__construct
     * @covers \App\Clients\Client::loadFromIndex
     */
    public function testLoadFromIndex() {
        $this->object->loadFromIndex(4);

        $fullnameHTML1 = $this->object->getFullName();
        
        $this->assertRegExp("`<span style=''>Mlle</span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;'>Hiro</span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;font-variant:small-caps;'>Nagaji</span>`", $fullnameHTML1);
    }

    /**
     * @covers \App\Clients\Client::delete
     */
    public function testDelete() {
        $loaded1 = $this->object->loadFromIndex(4);
        $this->object->delete();
        
        $this->assertTrue($loaded1);
        
        $fullnameHTML1 = $this->object->getFullName();
        $this->assertRegExp("`<span style=''>Mlle</span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;'>Hiro</span>`", $fullnameHTML1);
        $this->assertRegExp("`<span style='text-transform:capitalize;font-variant:small-caps;'>Nagaji</span>`", $fullnameHTML1);
        
        
        // Recréer un objet Client, sans données en cache
        $this->object = new Client($this->db);
        $loaded2 = $this->object->loadFromIndex(4);

        $this->assertFalse($loaded2);

        $fullnameHTML2 = $this->object->getFullName();
        $this->assertRegExp("`<span style=''></span>`", $fullnameHTML2);
        $this->assertRegExp("`<span style='text-transform:capitalize;'></span>`", $fullnameHTML2);
        $this->assertRegExp("`<span style='text-transform:capitalize;font-variant:small-caps;'></span>`", $fullnameHTML2);
        
    }
}
