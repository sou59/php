<?php
namespace App;

class ApplicationTestsExtends extends Application {
    
    public static function getDebugFreshInstance() {
        self::$instance = null;
        return self::getInstance();
    }
    public static function publicClone () {
        return clone self::$instance;
    }
    public static function publicWakeUp () {
        $serial = serialize(self::$instance);
        return unserialize($serial);
    }
    
    public static function DoInitPlugins() {
        self::$instance->initPlugins();
    }
    public static function getPluginClasses() {
        return self::$instance->pluginClasses;
    }
    public static function getPlugins() {
        return self::$instance->plugins;
    }
    
    public static function unregisterPlugins() {
        self::$instance->pluginClasses = array();
    }
}

/**
 * Generated by PHPUnit_SkeletonGenerator.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Application
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Application::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers \App\Application::__construct()
     * @covers \App\Application::getInstance()
     */
    public function testGetInstance() {
        $this->assertInstanceOf('\App\Application', $this->object);
    }
    
    /**
     * @covers \App\Application::__clone()
     */
    public function testClone() {
        $app1 = ApplicationTestsExtends::getDebugFreshInstance();
        $app2 = ApplicationTestsExtends::publicClone();
        
        $this->assertFalse($app1 === $app2); // Strictement différent...
        $this->assertTrue ($app1 ==  $app2); // ...mais quasiment égaux
    }
    
    /**
     * @covers \App\Application::__wakeup()
     */
    public function testWakeup() {
        $app1 = ApplicationTestsExtends::getDebugFreshInstance();
        $app2 = ApplicationTestsExtends::publicWakeup();
        
        $this->assertFalse($app1 === $app2); // Strictement différent...
        $this->assertTrue ($app1 ==  $app2); // ...mais quasiment égaux
    }
    
    /**
     * @covers \App\Application::__construct()
     * @covers \App\Application::registerAutoloader()
     */
    public function testConstructAutoloader() {
        //var_dump(spl_autoload_functions());
        $tabClosure = spl_autoload_functions();
        unset($tabClosure[0]); // Il s'agit des autoloads utilisés par PHPUnit
        
        // On va décharger la totalité des fonctions SPL que nous aurions pu ajouter
        foreach ($tabClosure as $closure) {
            spl_autoload_unregister($closure);
        }
        
        // Ce test peut être dangereux, car potentielement un test précédent peu avoir utiliser la classe BoiteAOutils
        $this->assertFalse(class_exists("\App\BoiteAOutils"));
        
        $this->object = ApplicationTestsExtends::getDebugFreshInstance();
        $this->assertTrue(class_exists("\App\BoiteAOutils"));
        $this->assertTrue(class_exists("\App\Controllers\ControllerAbstract"));
        $this->assertTrue(class_exists("\App\Bdd\BddFactory"));
        
        $this->assertFalse(class_exists("Inexistant"));
    }
    
    /**
     * @covers \App\Application::__construct()
     * @covers \App\Application::registerPlugins()
     */
    public function testPlugins() {
        $this->object->registerPlugins(
            array(
                'PluginGPC',
                'PluginLayout'
            )
        );
        
        $this->assertEquals(
            array(
                'PluginGPC',
                'PluginLayout'
            ), ApplicationTestsExtends::getPluginClasses());
        
        $this->object->registerPlugins('PluginSession');
        
        $this->assertEquals(
            array(
                'PluginGPC',
                'PluginLayout',
                'PluginSession'
            ), ApplicationTestsExtends::getPluginClasses());
    }
        
    /**
     * @covers \App\Application::__construct()
     * @covers \App\Application::registerPlugins()
     * @covers \App\Application::initPlugins()
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     */
    public function testPluginsInit() {
        
        $this->object->registerPlugins('PluginSession');
        
        $this->assertEquals('', session_id());
        ApplicationTestsExtends::doInitPlugins();
        $this->assertNotEquals('', session_id());
        
        $this->assertInstanceOf("\App\Plugins\PluginsArray", ApplicationTestsExtends::getPlugins());
        foreach (ApplicationTestsExtends::getPlugins() as $plugin) {
            $this->assertInstanceOf("\App\Plugins\PluginsInterface", $plugin);
        }
    }
    
    /**
     * @covers \App\Application::dispatch
     */
    public function testDispatchWithoutPlugin() {
        $_GET['page']         = '_test';
        
        ApplicationTestsExtends::unregisterPlugins();
        $this->expectOutputString("<menu></menu>\n<content>content test</content>");
        $this->object->dispatch();
    }
    
    /**
     * @covers \App\Application::dispatch
     */
    public function testDispatchWithLayoutPlugin() {
        $_GET['page']                                    = '_test';
        $_SESSION[Application::SESS_NS_AUTH]['userrole'] = "TEST";
        
        ApplicationTestsExtends::unregisterPlugins();
        $this->object->registerPlugins('PluginLayout');
        $this->expectOutputString("<menu>Menu TEST</menu>\n<content>content test</content>");
        $this->object->dispatch();
    }
    
    /**
     * @covers \App\Application::dispatch
     */
    public function testDispatchWithoutController() {
        $_GET['page']                                    = '_test2';
        $_SESSION[Application::SESS_NS_AUTH]['userrole'] = "TEST";
        
        ApplicationTestsExtends::unregisterPlugins();
        $this->expectOutputRegex("`content test2`");
        $this->object->dispatch();
    }
    
    /**
     * @covers \App\Application::getDb
     */
    public function testGetDb() {
        $db = $this->object->getDb();
        $this->assertInstanceOf("\App\Bdd\BddInterface", $db);
    }
}
